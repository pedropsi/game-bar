diff -r 2b38aa82c803 test/acceptance/ecma3/Date/e15_9_5.as
--- a/test/acceptance/ecma3/Date/e15_9_5.as	Tue Jan 29 06:59:24 2013 -0800
+++ b/test/acceptance/ecma3/Date/e15_9_5.as	Wed Mar 27 09:52:12 2013 -0700
@@ -596,6 +596,7 @@
     if (true) {
         // Date is a sealed class
         try{
+            thisError="";	
             Date.prototype.valueOf=Object.prototype.toString;
         }catch(e){
             thisError=e.toString();
diff -r 2b38aa82c803 test/acceptance/ecma3/Exceptions/exception_011_rt.as
--- a/test/acceptance/ecma3/Exceptions/exception_011_rt.as	Tue Jan 29 06:59:24 2013 -0800
+++ b/test/acceptance/ecma3/Exceptions/exception_011_rt.as	Wed Mar 27 09:52:12 2013 -0700
@@ -13,6 +13,7 @@
 var thisError = "Exited with uncaught exception";
 
 try {
+    thisError = "";
     throw (void 0);
 } catch(e:Error) {
     thisError = e.toString();
diff -r 2b38aa82c803 test/acceptance/runtests.py
--- a/test/acceptance/runtests.py	Tue Jan 29 06:59:24 2013 -0800
+++ b/test/acceptance/runtests.py	Wed Mar 27 09:52:12 2013 -0700
@@ -26,6 +26,7 @@
 
 class AcceptanceRuntest(RuntestBase):
     runESC = False
+    runShumway = False
     escbin = '../../esc/bin/'
     passthreadid = False
     androidthreads = False
@@ -49,6 +50,7 @@
 
     def usage(self, c):
         RuntestBase.usage(self, c)
+        print('    --shumway       run Shumway instead of avm')
         print('    --esc           run esc instead of avm')
         print('    --escbin        location of esc/bin directory - defaults to ../../esc/bin')
         print('    --eval          use run-time compiler')
@@ -66,7 +68,7 @@
 
     def setOptions(self):
         RuntestBase.setOptions(self)
-        self.longOptions.extend(['ext=','esc','escbin=','eval','threads=','ats',
+        self.longOptions.extend(['ext=','esc','shumway', 'escbin=','eval','threads=','ats',
                                  'atsdir=','verify','verifyonly','androidthreads','passthreadid'])
 
     def parseOptions(self):
@@ -74,6 +76,10 @@
         for o, v in opts:
             if o in ('--ext',):
                 self.sourceExt = v
+            elif o in ('--shumway',):
+                if not environ['SHUMWAY_HOME']:
+                    exit('ERROR: SHUMWAY_HOME environment variable must be set')
+                self.runShumway = True
             elif o in ('--esc',):
                 self.runESC = True
             elif o in ('--escbin',):
@@ -115,7 +121,7 @@
         self.setEnvironVars()
         self.loadPropertiesFile()
         self.setOptions()
-        self.parseOptions()
+        self.parseOptions() 
         self.setTimestamp()
         self.checkPath()
         (self.ascbuild,self.ascversion)=self.getAscVersion(self.asc)
@@ -170,6 +176,13 @@
                 self.avm += ' %s%s.es.abc' % (self.escbin, f)
             self.avm += ' -- '
             self.avm += ' %s../test/spidermonkey-prefix.es' % self.escbin  #needed to run shell harness
+        elif self.runShumway:
+            shumwayHome = environ["SHUMWAY_HOME"]
+            if not shumwayHome.endswith('/'):
+                shumwayHome += '/'
+            self.avm = '%sutils/jsshell/js %ssrc/avm2/bin/avm.js -x ' % (shumwayHome, shumwayHome)
+
+
         if self.androidthreads:
             p=subprocess.Popen('adb devices',shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
             (out,err)=p.communicate()
@@ -445,7 +458,6 @@
                 (f,err,exitcode) = self.run_pipe(cmd, outputCalls=outputCalls, envVars=passByEnv)
             else: # Execute on OSX
                 cmd = "%s %s %s" % (progpath, self.vmargs, extraVmArgs)
-                # print("about to execute: " + cmd)
                 (f,err,exitcode) = self.run_pipe(cmd, outputCalls=outputCalls)
         elif ast.endswith(self.abcasmExt):
             # make sure util file has been compiled
diff -r 2b38aa82c803 test/performance/runtests.py
--- a/test/performance/runtests.py	Tue Jan 29 06:59:24 2013 -0800
+++ b/test/performance/runtests.py	Wed Mar 27 09:52:12 2013 -0700
@@ -65,6 +65,7 @@
     serverHost = '10.60.48.47'
     serverPort = 1188
     finalexitcode = 0
+    runShumway = False
     
     # testData structure:
     # { testName : { metric : { results1/2 : [], best1/2 : num, avg1/2 : num, spdup : num }}}
@@ -198,6 +199,7 @@
         print("    --fullpath      print out full path for each test")
         print("    --repo=         repository url (used when logging to performance db)")
         print("    --logConfigAppend= string to append to the config string that is logged to the database along with vmargs")
+        print("    --shumway       run against Shumway")        
         exit(c)
 
     def setOptions(self):
@@ -207,13 +209,15 @@
                                  'runtime=','memory','metrics=','larger','vmversion=', 'vm2version=',
                                  'vmargs2=','nooptimize', 'score', 'saveindex=', 'index=',
                                  'perfm','csv=', 'csvappend','prettyprint', 'detail', 'raw',
-                                 'fullpath', 'repo=', 'logConfigAppend='])
+                                 'fullpath', 'repo=', 'logConfigAppend=', 'shumway'])
 
     def parseOptions(self):
         opts = RuntestBase.parseOptions(self)
         for o, v in opts:
             if o in ('-S', '--avm2'):
                 self.avm2 = v
+            elif o in ('--shumway'):
+                self.runShumway = True
             elif o in ('--avmname',):
                 self.avmname = v
             elif o in ('--avm2name',):
@@ -356,6 +360,12 @@
     def preProcessTests(self):
         'Code that must be executed before beginning a testrun'
 
+        if self.runShumway:
+            shumwayHome = environ["SHUMWAY_HOME"]
+            if not shumwayHome.endswith('/'):
+                shumwayHome += '/'
+            self.avm = '%sutils/jsshell/js %ssrc/avm2/bin/avm.js -x ' % (shumwayHome, shumwayHome)
+
         if self.logresults:
             # determine current config string for socketlog
             tmpvmargs = self.vmargs.replace("-AOTSIZE", "") # This is a fake vmarg that is used for reporting filesize, do not log to db
@@ -713,6 +723,7 @@
             self.allskips += 1
             return
 
+
         if self.forcerebuild and isfile(abc):
             os.unlink(abc)
         if isfile(abc) and getmtime(ast)>getmtime(abc):
diff -r 2b38aa82c803 test/performance/testconfig.txt
--- a/test/performance/testconfig.txt	Tue Jan 29 06:59:24 2013 -0800
+++ b/test/performance/testconfig.txt	Wed Mar 27 09:52:12 2013 -0700
@@ -20,65 +20,3 @@
 canaries/.*           , canaries  ,, include , canaries testsuite
 .*/canaries/.*        , canaries  ,, include , canaries testsuite
 
-canaries/simpleflexapp.*, misc,, skip, test is failing due to changes to builtin - dschaffe is investigating (10/13/10)
-
-sunspider.*/.*        , misc    ,, skip  , skip sunspider
-jsbench/.*            , misc    ,, skip  , skip jsbench
-v8.*/.*               , misc    ,, skip  , skip v8
-jsmicro/.*            , misc    ,, skip  , skip jsmicro
-
-misc/.*               , miscdir ,, include  , misc testsuite
-misc/driver           , .*      ,, skip  , included by test files
-
-## skip mmgc tests always, they are to be run manually for the time being
-mmgc/.*               , misc    ,, skip , mmgc diagnostic tests
-
-## skip fc64, crashes -memstats on windows
-.*fc64.*              , .*      ,, skip  , skip fc64 bug 488114
-
-## misc-mobile : required since the canaries tests require access to additional abc files which will not be on the device
-sunspider.*/.*        , misc-mobile.*  ,, skip  , skip sunspider
-jsbench/.*            , misc-mobile.*  ,, skip  , skip jsbench
-v8.*/.*               , misc-mobile.*  ,, skip  , skip v8
-jsmicro/.*            , misc-mobile    ,, skip  , skip jsmicro
-canaries/.*           , misc-mobile.*  ,, skip  , skip canaries as they require additional files to run which will not be on the device
-.*/canaries/.*        , misc-mobile.*  ,, skip  , skip canaries as they require additional files to run which will not be on the device
-
-## sunspider-mobile : required because controlflow-recursive overflows the stack https://bugzilla.mozilla.org/show_bug.cgi?id=458055
-sunspider.*/.*              , sunspider-mobile.* ,, include , sunspider testsuite
-.*/controlflow-recursive.*  , sunspider-mobile.* ,, skip , sunspider testsuite
-
-
-## WONTFIX: Stack-overflow on winmo when running sunspider/s3d-cude with the interpreter
-.*/s3d-cube  , sunspider-mobile-Dinterp ,, skip , https://bugzilla.mozilla.org/show_bug.cgi?id=496942
-
-jsbench/Search    , .*,,       skip    ,       skip test runs too long and times out buildbot
-.*util.*             , .*,,       skip    ,       skip internal files
-
-sunspider/(as3/|)regexp-dna  ,.*       ,,skip, large string.match(regexp) verifier error:1068 https://bugzilla.mozilla.org/show_bug.cgi?id=409206
-#sunspider/(as3/|)date-format-tofte  ,.*       ,,skip, contains eval
-sunspider/(as3/|)date-format-xparb ,.*       ,,skip, contains eval
-#sunspider/(as3/|)string-unpack-code,.*       ,,skip, too slow: javascript compressor code runs slowly https://bugzilla.mozilla.org/show_bug.cgi?id=409225
-sunspider/(as3/|)string-base64 ,.*       ,,skip, string indexing throws ReferenceError "z"[0] https://bugzilla.mozilla.org/show_bug.cgi?id=409210
-sunspider/(as3/|)string-tagcloud ,.*       ,,skip, contains eval
-
-sunspider-0.9.1/.*/date-format-tofte  ,.*       ,,skip, contains eval
-sunspider-0.9.1/.*/date-format-xparb ,.*       ,,skip, contains eval
-sunspider-0.9.1/.*/string-base64 ,.*       ,,skip, string indexing throws ReferenceError "z"[0] https://bugzilla.mozilla.org/show_bug.cgi?id=409210
-sunspider-0.9.1/.*/string-tagcloud ,.*       ,,skip, contains eval
-
-# util file for language tests
-language/string/timetest, .*,, skip, included in test files
-
-# util files for v8 tests
-v8/base,         .*,, skip, included by test files
-v8/run ,         .*,, skip, file used to run entire suite at once
-v8.*/.*/base,    .*,, skip, included by test files
-v8.*/.*/run ,    .*,, skip, file used to run entire suite at once
-
-# util files for jsmicro tests
-jsmicro/generate-drivers , .* ,, skip , run manually to generate driver files during development
-
-asmicro/driver, .* ,, skip, included by test files
-asmicro/float.*, .*,, skip, skip the float asmicro testcases until float is enabled by default
-
diff -r 2b38aa82c803 test/util/runtestBase.py
--- a/test/util/runtestBase.py	Tue Jan 29 06:59:24 2013 -0800
+++ b/test/util/runtestBase.py	Wed Mar 27 09:52:12 2013 -0700
@@ -112,7 +112,7 @@
     sourceExt = '.as'
     supportFolderExt = '_support'
     testconfig = 'testconfig.txt'
-    test_harness_dir = '.'
+    test_harness_dir = abspath('.')
     vmargs = ''
     vmtype = ''
     aotsdk = None
@@ -459,17 +459,17 @@ class RuntestBase(object):
         self.vmtype = 'release'
         if self.osName=='winmobile-emulator':
             # try to determine vmtype by filename
             vm_name = splitext(split(self.avm)[1])[0]
             if '_d' in vm_name:
                 self.vmtype = 'debug'
             else:
                 self.vmtype = 'release'
-        elif not self.runSource and not self.rebuildtests:
+        elif not self.runSource and not self.rebuildtests and len(self.avm) > 0:
             (f,err,exitcode) = self.run_pipe('%s -Dversion' % self.avm)
             try:
                 self.avm_features = f[1]    # save feature list
                 # determine avmshell type
                 if re.search('debug-debugger',f[0]):
                     self.vmtype = 'debugdebugger'
                 elif re.search('release-debugger',f[0]):
                     self.vmtype = 'releasedebugger'
@@ -671,7 +671,7 @@
                 newargs.append(convertFromCygwin(t).strip())
             self.args = newargs
 
-        if not self.rebuildtests and self.aotsdk==None:
+        if not self.runShumway and not self.rebuildtests and self.aotsdk==None:
             self.checkExecutable(self.avm, 'AVM environment variable or --avm must be set to avmplus')
 
     def createOutputFile(self):
@@ -698,11 +698,13 @@
             for a in startDir:
                 newstartDir.append(self.altsearchpath+a)
             startDir=startDir+newstartDir
+        rootDir = abspath(".")
         for i in range(len(startDir)):
             if startDir[i][-1] == '/':
                 startDir[i] = startDir[i][:-1]
             if startDir[i].startswith('./'):
                 startDir[i] = startDir[i][2:]
+            startDir[i] = rootDir + "/" + startDir[i]
         tests = [a for a in startDir if isfile(a) and self.istest(a, fileExtentions)]
         for a in [d for d in startDir if isdir(d) and not (basename(d) in self.exclude)]:
             for d, dirs, files in walk(a, followlinks=True):
@@ -784,34 +786,35 @@ class RuntestBase(object):
         # return settings for this test
         settings = {}
         for k in self.settings.keys():
             match = False
             if k == root:
                 match = True
             elif any(regex_char in k for regex_char in self.REGEX_CHARS):
                 # Do a regex search if there are regex chars in the key
-                if re.search('^'+k+'$', root):
+#                if re.search('^'+k+'$', root):
+                if re.search(k+'$', root):
                     match = True
-                
+
             if match:
                 for k2 in self.settings[k].keys():
                     if k2 in settings:
                         settings[k2].update(self.settings[k][k2])
                     else:
                         settings[k2] = self.settings[k][k2].copy()
         return settings
 
     def istest(self,f, fileExtentions):
         return f.endswith(fileExtentions) and not f.endswith('Util'+self.sourceExt)
 
     def parents(self, d):
         '''return a generator of the current dir and all parent directories up
             to the test dir root'''
-        while d != abspath(self.args[0]) and d != '':
+        while abspath(d) != self.test_harness_dir and d != '':
             yield d
             d = dirname(d)
         yield '.'   # yield the test dir root
 
     def parseTestConfig(self, config_file):
         '''read a configuration file and parse it into the settings dictionary'''
         settings = {}
         directives = {}
@@ -1967,6 +1971,9 @@
 
     def getAvmVersion(self, vm=None, txt=None):
         '''Pull the avm version out of the vm info or description string if provided.'''
+        if self.runShumway:
+            return 'shumway'
+
         if vm:
             (f,err,exitcode) = self.run_pipe('%s' % vm)
             txt = f[1]
